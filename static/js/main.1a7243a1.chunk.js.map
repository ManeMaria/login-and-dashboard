{"version":3,"sources":["context/global-provider/Global.tsx","styles/theme/chakra-styles.ts","styles/theme/index.ts","context/AppProvider/AppProvider.tsx","config/index.ts","utils/cookies.ts","routes/index.tsx","lib/authentication.ts","App.tsx","index.tsx"],"names":["GlobalContext","createContext","AuthProvider","children","useState","useData","setUserData","Provider","value","styles","global","props","html","minH","body","fontFamily","color","mode","bg","lineHeight","borderColor","wordWrap","fonts","heading","extendTheme","colors","green","gray","white","config","initialColorMode","useSystemColorMode","AppProvider","fallback","w","h","alignItems","justifyContent","size","theme","ACCESS_TOKEN_ID","process","REACT_APP_API_URL","REACT_APP_MOCK_API_URL","cookies","Cookies","get","ProtectedRoutes","lazy","PublicRoutes","AppRoutes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAIaA,EAAgBC,wBAAc,IAEpC,SAASC,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,SAC7B,EAA+BC,qBAA/B,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,OACE,cAACN,EAAcO,SAAf,CAAwBC,MAAO,CAAEH,UAASC,eAA1C,SAA0DH,I,MAIvD,I,gBCZMM,EAAS,CACpBC,OAAQ,SAACC,GAAD,MAA8B,CACpCC,KAAM,CACJC,KAAM,QAERC,KAAM,CACJC,WAAY,kBACZC,MAAOC,YAAK,WAAY,QAAjBA,CAA0BN,GACjCO,GAAID,YAAK,QAAS,WAAdA,CAA0BN,GAC9BQ,WAAY,QAEd,iBAAkB,CAChBH,MAAOC,YAAK,WAAY,iBAAjBA,CAAmCN,IAE5C,yBAA0B,CACxBS,YAAaH,YAAK,WAAY,iBAAjBA,CAAmCN,GAChDU,SAAU,cAGZC,MAAO,CACLC,QAAS,kBACTT,KAAM,sBCnBGU,cAAY,CACzBf,SACAgB,OAAQ,CACNC,MAAO,UACPC,KAAM,CACJ,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,MAAO,WAETC,OAAQ,CACNC,iBAAkB,OAClBC,oBAAoB,KCNXC,EAAc,SAAC,GAAkC,IAAhC7B,EAA+B,EAA/BA,SAC5B,OACE,cAAC,WAAD,CACE8B,SACE,cAAC,IAAD,CAAMC,EAAE,QAAQC,EAAE,QAAQC,WAAW,SAASC,eAAe,SAA7D,SACE,cAAC,IAAD,CAAWC,KAAK,SAHtB,SAOE,cAAC,IAAD,CAAgBC,MAAOA,EAAvB,SACE,eAACrC,EAAD,WACE,cAAC,IAAD,CAAiB4B,iBAAkBS,EAAMV,OAAOC,mBAChD,cAAC,IAAD,UAAgB3B,Y,yBCVbqC,GATUC,uJAAYC,kBACPD,uJAAYE,uBAQT,WCTlBC,EACA,kBAAMC,IAAQC,IAAIN,ICD/B,IAAMO,EAAkBC,gBAAK,kBAAM,iCAC7BC,EAAeD,gBAAK,kBAAM,uDAEnBE,EAAY,WAEvB,QCJSN,IDIK,cAACG,EAAD,IAAsB,cAACE,EAAD,KEEvBE,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCANC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1a7243a1.chunk.js","sourcesContent":["import React, { useState, createContext, useContext } from 'react';\n\nimport { IChildrenReact } from '@/types/IChildrenReact';\n\nexport const GlobalContext = createContext({});\n\nexport function AuthProvider({ children }: IChildrenReact) {\n  const [useData, setUserData] = useState<any | null>();\n\n  return (\n    <GlobalContext.Provider value={{ useData, setUserData }}>{children}</GlobalContext.Provider>\n  );\n}\n\nexport const useAuth = () => useContext(GlobalContext);\n","import { mode, GlobalStyleProps } from '@chakra-ui/theme-tools';\nimport '@fontsource/source-sans-pro';\nexport const styles = {\n  global: (props: GlobalStyleProps) => ({\n    html: {\n      minH: '100%',\n    },\n    body: {\n      fontFamily: 'Source Sans Pro',\n      color: mode('gray.800', 'white')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n\n    fonts: {\n      heading: 'Source Sans Pro',\n      body: 'Source Sans Pro',\n    },\n  }),\n};\n","import { extendTheme } from '@chakra-ui/react';\n\nimport { styles } from './chakra-styles';\n\nexport default extendTheme({\n  styles,\n  colors: {\n    green: '#558B2F',\n    gray: {\n      100: '#C7CCD8',\n      200: '#595F6E',\n      300: '#4D4F5C',\n    },\n    white: '#FFFFFF',\n  },\n  config: {\n    initialColorMode: 'dark',\n    useSystemColorMode: false,\n  },\n});\n","import { ChakraProvider, ColorModeScript, Flex } from '@chakra-ui/react';\nimport React, { Suspense } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport DotLoader from 'react-spinners/DotLoader';\n\nimport { AuthProvider } from '../global-provider/Global';\n\nimport '@fontsource/source-sans-pro';\nimport { theme } from '@/styles';\nimport { IChildrenReact } from '@/types/IChildrenReact';\n\nexport const AppProvider = ({ children }: IChildrenReact) => {\n  return (\n    <Suspense\n      fallback={\n        <Flex w=\"100vw\" h=\"100vh\" alignItems=\"center\" justifyContent=\"center\">\n          <DotLoader size=\"xl\" />\n        </Flex>\n      }\n    >\n      <ChakraProvider theme={theme}>\n        <AuthProvider>\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <BrowserRouter>{children}</BrowserRouter>\n        </AuthProvider>\n      </ChakraProvider>\n    </Suspense>\n  );\n};\n","export const APP_NAME = 'React Leap 🚀👨‍🚀';\n\nexport const BRAND_COLOR = '#135f9b';\n\nexport const API_URL = process.env.REACT_APP_API_URL as string;\nexport const MOCK_API_URL = process.env.REACT_APP_MOCK_API_URL as string;\n\nexport const ENVIROMENT = process.env.NODE_ENV;\n\nexport const DEFAULT_PUBLIC_PAGE = '/entrar';\n\nexport const DEFAULT_PRIVATE_PAGE = '/';\n\nexport const ACCESS_TOKEN_ID = '_access';\nexport const REFRESH_TOKEN_ID = '_refresh';\nexport const USER_INFO_ID = '_user-info';\n\nexport const MSW_DB = '_msw-db';\n\nexport const JWT_ACCESS_SECRET = '123456' as string;\nexport const JWT_ACCESS_EXPIRES_IN = 10;\nexport const JWT_REFRESH_SECRET = '123456789' as string;\nexport const JWT_REFRESH_EXPIRES_IN = 50;\n","import Cookies from 'js-cookie';\r\n\r\nimport { ACCESS_TOKEN_ID, REFRESH_TOKEN_ID } from '@/config';\r\n\r\nexport const cookies = {\r\n  getAccess: () => Cookies.get(ACCESS_TOKEN_ID),\r\n  setAccess: (accessToken: string) => Cookies.set(ACCESS_TOKEN_ID, accessToken),\r\n  clearAccess: () => Cookies.remove(ACCESS_TOKEN_ID),\r\n  getRefresh: () => Cookies.get(REFRESH_TOKEN_ID),\r\n  setRefresh: (refreshToken: string) => Cookies.set(REFRESH_TOKEN_ID, refreshToken),\r\n  clearRefresh: () => Cookies.remove(REFRESH_TOKEN_ID),\r\n};\r\n","import { lazy } from 'react';\n\nimport { useAuth } from '@/lib/authentication';\n\nconst ProtectedRoutes = lazy(() => import('./ProtectedRoutes'));\nconst PublicRoutes = lazy(() => import('./PublicRoutes'));\n\nexport const AppRoutes = () => {\n  const auth = useAuth();\n  return auth ? <ProtectedRoutes /> : <PublicRoutes />;\n};\n","import jwt_decode from 'jwt-decode';\n\nimport { cookies } from '@/utils';\n\nexport function useAuth() {\n  return !!cookies.getAccess();\n}\n\nexport function decodeUserData(token: string): void {\n  jwt_decode(token);\n}\n","import { AppProvider } from '@/context/AppProvider';\nimport { AppRoutes } from '@/routes';\n\nfunction App() {\n  return (\n    <AppProvider>\n      <AppRoutes />\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}